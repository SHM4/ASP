- https://developer.android.com/training/basics/firstapp?hl=ko
    - 안드로이드 스튜디오 개발자 가이드 첫 앱 빌드 따라하기

- CodeLab 시작하기

3. 템플릿을 사용하여 프로젝트 만들기
- New Project
- 강의 : Empty Compose Activity
- 나 : Empty Activity 템플릿 선택
- Name : Greeting Card
- Minimun SDK : API 21 ("Lollipop"; Android 5.0)
- 나머지 옵션 안 건드리고 Finish
- compileSdk 34 설정
- MainActivity.kt > Design 뷰 > A successful built is needed before the preview can be displayed 창 표시 > Build & Refresh 링크 클릭
- 미리보기에 Greeting Android 출력

4. 프로젝트 파일 찾기 - 파일 계층 구조 전환
- Project 탭 > 상단 드롭다운 메뉴 > (Android > Project Source Files)

5. 텍스트 업데이트
- MainActivity.kt
    - onCreate() : 이 앱의 진입점. 다른 함수를 호출하여 사용자 인터페이스를 빌드한다.
        - Kotlin 프로그램에서 main() 함수가 Kotlin 컴파일러가 시작되는 특정 위치를 하는 것과 같은 역할
        cf) 코드 컴파일 : 개발자가 작성한 코드를 가져와 컴퓨터가 이해할 수 있는 형식으로 변환
    - setContent() : 구성 가능한 함수를 통해 레이아웃을 정의
    - @Composable 
        - 이 주석으로 표시된 함수는 setContent() 함수 또는 다른 구성 가능한 함수에서 호출될 수 있다.
        - @Composable 주석은 Jetpack Compose에서 이 함수가 UI를 생성하는 데 사용된다고 Kotlin 컴파일러에게 알려준다.
    - Greeting()
        - @Composable 주석이 있는 구성 가능한 함수. 
        cf) 구성 가능한 함수(Composable 함수)
            - 함수 앞에 @Composable 주석을 추가
            - 함수 이름을 대문자로 표기
            - 아무 값도 반환하지 않는다.(매개변수로 데이터를 받아서 UI를 전달하는 방식?)
        - Greeting()의 text를 변경하면 디자인 뷰의 DefaultPreview가 리빌드된다.
            - 강의에서는 DefaultPreview라고 하는데, 나는 기본 이름이 GreetingPreview로 설정돼 있다.
    - GreetingPreview()
        - GreetingPreview() 함수로 전체 앱을 빌드하지 않고도 앱이 어떻게 표시되는지 확인할 수 있다.
        - @Preview 주석을 추가하여 미리보기 함수로 지정한다.
        - @Preview 주석에 showbackground 매개변수를 true로 적용하면 앱 미리보기에 배경이 추가된다.
        - Greeting()의 매개변수를 변경하여 미리보기에 표시되는 매개변수 부분 내용을 변경할 수 있다.

6. 배경 색상 변경
- Surface : 배경 색상이나 테두리와 같은 모양을 개발자가 변경할 수 있는 UI 섹션을 나타내는 컨테이너
- Greeting() > Text 줄 블록 처리 > Alt+Enter(윈도우 체제) > Surround with widget > Surround with Container > Text 상위에 Box 컨테이너가 형성됨 > 컨테이너 변경 (Box > Surface()) > Surface 컨테이너에 color 매개변수 설정(Surface(color = Color)) > 상단 import 문에 import androidx.compose.ui.graphics.Color 추가 > import문 순서 정리(Code > Optimize imports) > magenta 색상 지정(Surface(color = Color.Magenta))

7. 패딩 추가
- import문 추가 > Optimize imports(Ctrl+Alt+O)
    import androidx.compose.ui.unit.dp
    import androidx.compose.foundation.layout.padding
- 패딩 추가 : modifier = modifier.padding(24.dp)
- Modifier : 컴포저블 함수를 강화하거나 장식하는 데 사용하는 요소 - https://developer.android.com/reference/kotlin/androidx/compose/ui/Modifier

8. 완성
package com.example.greetingcard

import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.example.greetingcard.ui.theme.GreetingCardTheme

class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            GreetingCardTheme {
                // A surface container using the 'background' color from the theme
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    Greeting("Android")
                }
            }
        }
    }
}

@Composable
fun Greeting(name: String, modifier: Modifier = Modifier) {
    Surface(color = Color.Magenta) {
        Text(
            text = "Hi, my name is $name!",
            modifier = modifier.padding(24.dp)
        )
    }
}

@Preview(showBackground = true)
@Composable
fun GreetingPreview() {
    GreetingCardTheme {
        Greeting("Son")
    }
}